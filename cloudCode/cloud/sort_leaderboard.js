// Generated by CoffeeScript 1.6.2
var ranks_percentages, utils, _;

ranks_percentages = require('cloud/ranks_percentages.js').data;

utils = require('cloud/utilities.js');

_ = require("underscore");

exports.task = function(request, response) {
  var fetchAndParseUser, fetchAndParseUsers, fetchUsersRanges, parseUser, query, userId, userRank;

  userRank = request.params.rank;
  userId = request.params.userId;
  query = new Parse.Query('User');
  query.equalTo('rank', userRank);
  query.find({
    error: function() {
      return response.error();
    },
    success: function(results) {
      var indexOfFirstDowning, indexOfLastUpping, percents, playerIndex, players, playersNumber, ranges;

      if (results.length === 0) {
        return response.success({
          players: [],
          total: 0
        });
      }
      results = utils.sortByScoreAndAlphabetic(results);
      playerIndex = 0;
      _.find(results, function(user) {
        var res;

        if (!(res = user.id === userId)) {
          playerIndex++;
        }
        return res;
      });
      playersNumber = results.length;
      if (!(results.length > 0)) {
        return;
      }
      percents = ranks_percentages[userRank - 1];
      if (!percents) {
        return;
      }
      indexOfLastUpping = Math.ceil(playersNumber * percents.up / 100);
      indexOfFirstDowning = playersNumber - Math.ceil(playersNumber * percents.down / 100);
      ranges = {
        up: [],
        stay: [],
        down: []
      };
      if (indexOfLastUpping > 9) {
        ranges.up.push([0, 9]);
        ranges.up.push([indexOfLastUpping]);
      } else {
        ranges.up.push([0, indexOfLastUpping]);
      }
      ranges.stay.push([indexOfLastUpping + 1]);
      ranges.stay.push([indexOfFirstDowning - 1]);
      ranges.down.push([indexOfFirstDowning]);
      ranges.down.push([playersNumber - 1]);
      if (playerIndex < indexOfLastUpping) {
        ranges.up.push([playerIndex]);
      } else if (playerIndex > indexOfFirstDowning) {
        ranges.down.push([playerIndex]);
      } else {
        ranges.stay.push([playerIndex]);
      }
      players = fetchUsersRanges(results, ranges);
      return response.success({
        players: players,
        total: playersNumber
      });
    }
  });
  fetchUsersRanges = function(users, blocks) {
    var player, players, range, range_name, ranges, _i, _len;

    players = [];
    for (range_name in blocks) {
      ranges = blocks[range_name];
      for (_i = 0, _len = ranges.length; _i < _len; _i++) {
        range = ranges[_i];
        if (isNaN(range)) {
          players.push(fetchAndParseUsers(users, range, range_name));
        } else {
          players.push(fetchAndParseUser(users, range, range_name));
        }
      }
    }
    players = _.flatten(players, true);
    player = _.compact(players);
    player = _.uniq(players, false, function(player) {
      return player.position;
    });
    players = players.sort(function(p1, p2) {
      return p1.position - p2.position;
    });
    return players;
  };
  fetchAndParseUsers = function(users, range, range_name) {
    var index, user, _i, _len, _ref, _results;

    _ref = users.slice(range[0], +range[1] + 1 || 9e9);
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      user = _ref[index];
      if (!user) {
        continue;
      }
      user = parseUser(user, range[0] + index, range_name);
      _results.push(user);
    }
    return _results;
  };
  fetchAndParseUser = function(users, range, range_name) {
    var index, user;

    index = range[0];
    user = users[index];
    if (!user) {
      return;
    }
    user = parseUser(user, index, range_name);
    return user;
  };
  return parseUser = function(user, position, range_name) {
    return {
      username: user.get('username'),
      object_id: user.id,
      fb_id: user.get('fb_id'),
      score: user.get('score'),
      rank: userRank,
      position: parseInt(position) + 1,
      range_name: range_name
    };
  };
};
