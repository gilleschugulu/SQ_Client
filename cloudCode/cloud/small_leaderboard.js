// Generated by CoffeeScript 1.6.2
(function() {
  exports.task = function(request, response) {
    var fetchUser, getQuery, players, taskDone, tasks;

    tasks = request.params.size;
    players = [];
    getQuery = function() {
      return (new Parse.Query('User')).greaterThan('score', 0);
    };
    taskDone = function(max) {
      var player;

      if (--tasks < 1) {
        players.slice(0, max);
        return response.success((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = players.length; _i < _len; _i++) {
            player = players[_i];
            _results.push({
              position: player.position | 0,
              fb_id: player.get('fb_id'),
              username: player.get('username'),
              object_id: player.id,
              score: player.get('score') | 0
            });
          }
          return _results;
        })());
      }
    };
    fetchUser = function(offset, max) {
      return getQuery().descending('score').skip(offset).first({
        success: function(user) {
          if (user) {
            user.position = offset + 1;
            players.push(user);
          }
          return taskDone(max);
        },
        error: function() {
          return taskDone(max);
        }
      });
    };
    return getQuery().count({
      success: function(number) {
        var count, i, offset, offsets, step, _i, _j, _len, _ref, _results;

        count = request.params.size;
        offsets = [0];
        if (count > 1) {
          if (count > 2) {
            step = Math.floor(number / (count - 1));
            for (i = _i = 0, _ref = count - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              offsets.push((i + 1) * step);
            }
          }
          offsets.push(number - 1);
        }
        _results = [];
        for (_j = 0, _len = offsets.length; _j < _len; _j++) {
          offset = offsets[_j];
          _results.push(fetchUser(offset, number));
        }
        return _results;
      },
      error: function(obj, error) {
        return response.error(error, "could not count");
      }
    });
  };

}).call(this);
