// Generated by CoffeeScript 1.6.2
var _;

_ = require('underscore');

exports.task = function(request, response) {
  var decreaseUsersRank, increaseUsersRank, query, ranks_percentages, requestsDone;

  requestsDone = 0;
  ranks_percentages = [
    {
      up: 95,
      down: 0
    }, {
      up: 90,
      down: 1
    }, {
      up: 80,
      down: 2
    }, {
      up: 70,
      down: 4
    }, {
      up: 60,
      down: 8
    }, {
      up: 50,
      down: 16
    }, {
      up: 40,
      down: 32
    }, {
      up: 30,
      down: 48
    }, {
      up: 20,
      down: 64
    }, {
      up: 0,
      down: 80
    }
  ];
  increaseUsersRank = function(numberToKeep, users) {
    var guys, user, _i, _len;

    guys = _.first(users, numberToKeep);
    for (_i = 0, _len = guys.length; _i < _len; _i++) {
      user = guys[_i];
      user.set('score', 0).increment('rank').save();
    }
    return guys;
  };
  decreaseUsersRank = function(numberToKeep, users) {
    var guys, user, _i, _len;

    guys = _.last(users, numberToKeep);
    for (_i = 0, _len = guys.length; _i < _len; _i++) {
      user = guys[_i];
      user.set('score', 0).increment('rank', -1).save();
    }
    return guys;
  };
  query = new Parse.Query('User');
  query.descending('score');
  return query.find({
    success: function(results) {
      var downedGuys, number, percents, players, playersNumber, playersPerRank, rank, uppedGuys, user, _i, _len;

      Parse.Cloud.useMasterKey();
      playersPerRank = _.groupBy(results, function(player) {
        return player.get('rank');
      });
      for (rank in playersPerRank) {
        players = playersPerRank[rank];
        playersNumber = players.length;
        if (!(players.length > 0)) {
          return;
        }
        percents = ranks_percentages[rank - 1];
        if (!percents) {
          return;
        }
        if ((number = Math.ceil(playersNumber * percents.up / 100)) > 0) {
          uppedGuys = increaseUsersRank(number, players);
        }
        players = _.difference(players, uppedGuys);
        if ((number = Math.ceil(playersNumber * percents.down / 100)) > 0) {
          downedGuys = increaseUsersRank(number, players);
        }
        players = _.difference(players, downedGuys);
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          user = players[_i];
          user.set('score', 0).save();
        }
      }
    }
  });
};
